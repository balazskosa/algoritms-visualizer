<div>
  <h1>What is Selection Sort?</h1>
  <ul>
    <li>
      It is a simple sort algorithm that revolves around the comparison
    </li>
    <li>
      In each iteration, one element gets placed
    </li>
    <li>
      We choose the minimum element in the array and place is at the beginning of the array by swapping with the front element
    </li>
    <li>
      We can also do this by choosing maximum element and placing it at the rear end
    </li>
    <li>
      Selection sort basically selects an element in every iteration and place it at the appropriate position
    </li>
  </ul>

  <h1>Working of Maximum Selection Sort</h1>

  <ul>
    <li>
      Set the first element as maximum
    </li>
    <li>
      Compare maximum with the second element.
      If the second element is greater than maximum, assign the second element as maximum
      Compare the maximum with the third element.
      Again, if the third element is greater, then assign maximum to the third element otherwise do nothing. The process goes on until the last element.
    </li>
    <li>
      After each iteration, the maximum is placed at the end of the unsorted list.
    </li>
    <li>
      For each iteration, indexing starts from the first unsorted element. Step 1 to 3 are repeated until all the elements are placed at their correct positions.
    </li>
  </ul>

  <h1>Selection sort Time Complexity</h1>
  <ul>
    <li>
      In the worst case, in every iteration, we have to traverse the entire array for finding min elements and this will continue for all n elements. Hence this will perform n^2 operations in total.
    </li>
    <li>
      In the best case that is sorted array, we can do some modification by using lag to check whether the lament is already sorted or not
    </li>
    <li>
      Best Time Complexity: O(n)
    </li>
    <li>
      Average Time Complexity: O(n^2)
    </li>
    <li>
      Worst Time Complexity: O(n^2)
    </li>
  </ul>

  <h1>Selection Sort Algorithm</h1>
  <pre>
<code>
selectionSort(array, size)
  repeat (size - 1) times
  set the first unsorted element as the minimum
  for each of the unsorted elements
    if element < currentMinimum
      set element as new minimum
  swap minimum with first unsorted position
end selectionSort
</code>
</pre
<h1>Selection Sort Code in Java</h1>
<pre>
<code>
// Selection sort in Java

import java.util.Arrays;

class SelectionSort {
  void selectionSort(int array[]) {
    int size = array.length;

    for (int step = 0; step < size - 1; step++) {
      int min_idx = step;

      for (int i = step + 1; i < size; i++) {

        // To sort in descending order, change > to < in this line.
        // Select the minimum element in each loop.
        if (array[i] < array[min_idx]) {
          min_idx = i;
        }
      }

      // put min at the correct position
      int temp = array[step];
      array[step] = array[min_idx];
      array[min_idx] = temp;
    }
  }

  // driver code
  public static void main(String args[]) {
    int[] data = { 20, 12, 10, 15, 2 };
    SelectionSort ss = new SelectionSort();
    ss.selectionSort(data);
    System.out.println("Sorted Array in Ascending Order: ");
    System.out.println(Arrays.toString(data));
  }
}
</code>
<pre>
</div>